// Generated by CoffeeScript 1.8.0
var ANIMATION_END_NAME, ANIMATION_END_NAMES, BindShare, CreateImg, TRANSITION_END_NAME, TRANSITION_END_NAMES, VENDORS, app, css3Prefix, fShare, hosts, i, mTestElement, my, refreshShare, reloadWechat, shareContent, shareFriend, shareTimeline, _i, _len, _slider, _watchbandimgs, _wechat, _wechat_bool, _wechat_f;

VENDORS = ["Moz", 'webkit', 'ms', 'O'];

TRANSITION_END_NAMES = {
  "Moz": "transitionend",
  "webkit": "webkitTransitionEnd",
  "ms": "MSTransitionEnd",
  "O": "oTransitionEnd"
};

ANIMATION_END_NAMES = {
  "Moz": "animationend",
  "webkit": "webkitAnimationEnd",
  "ms": "MSAnimationEnd",
  "O": "oAnimationEnd"
};

mTestElement = document.createElement("div");

for (_i = 0, _len = VENDORS.length; _i < _len; _i++) {
  i = VENDORS[_i];
  css3Prefix = i;
  if ((css3Prefix + "Transition") in mTestElement.style) {
    break;
  }
  css3Prefix = false;
}

if (css3Prefix) {
  TRANSITION_END_NAME = TRANSITION_END_NAMES[css3Prefix];
  ANIMATION_END_NAME = ANIMATION_END_NAMES[css3Prefix];
}

my = {};

my.getid = function(id) {
  return document.getElementById(id);
};

my.getclass = function(cls) {
  return document.getElementsByClassName(cls);
};

my.getbyname = function(name) {
  return document.getElementsByName(name);
};

my.createObjectURL = function(file) {
  if (window.navigator.userAgent.indexOf("Chrome") >= 1 || window.navigator.userAgent.indexOf("Safari") >= 1) {
    return window.webkitURL.createObjectURL(file);
  } else {
    return window.URL.createObjectURL(file);
  }
};

(function() {

    var debug = false;

    var root = this;

    var EXIF = function(obj) {
        if (obj instanceof EXIF) return obj;
        if (!(this instanceof EXIF)) return new EXIF(obj);
        this.EXIFwrapped = obj;
    };

    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = EXIF;
        }
        exports.EXIF = EXIF;
    } else {
        root.EXIF = EXIF;
    }

    var ExifTags = EXIF.Tags = {

        // version tags
        0x9000 : "ExifVersion",             // EXIF version
        0xA000 : "FlashpixVersion",         // Flashpix format version

        // colorspace tags
        0xA001 : "ColorSpace",              // Color space information tag

        // image configuration
        0xA002 : "PixelXDimension",         // Valid width of meaningful image
        0xA003 : "PixelYDimension",         // Valid height of meaningful image
        0x9101 : "ComponentsConfiguration", // Information about channels
        0x9102 : "CompressedBitsPerPixel",  // Compressed bits per pixel

        // user information
        0x927C : "MakerNote",               // Any desired information written by the manufacturer
        0x9286 : "UserComment",             // Comments by user

        // related file
        0xA004 : "RelatedSoundFile",        // Name of related sound file

        // date and time
        0x9003 : "DateTimeOriginal",        // Date and time when the original image was generated
        0x9004 : "DateTimeDigitized",       // Date and time when the image was stored digitally
        0x9290 : "SubsecTime",              // Fractions of seconds for DateTime
        0x9291 : "SubsecTimeOriginal",      // Fractions of seconds for DateTimeOriginal
        0x9292 : "SubsecTimeDigitized",     // Fractions of seconds for DateTimeDigitized

        // picture-taking conditions
        0x829A : "ExposureTime",            // Exposure time (in seconds)
        0x829D : "FNumber",                 // F number
        0x8822 : "ExposureProgram",         // Exposure program
        0x8824 : "SpectralSensitivity",     // Spectral sensitivity
        0x8827 : "ISOSpeedRatings",         // ISO speed rating
        0x8828 : "OECF",                    // Optoelectric conversion factor
        0x9201 : "ShutterSpeedValue",       // Shutter speed
        0x9202 : "ApertureValue",           // Lens aperture
        0x9203 : "BrightnessValue",         // Value of brightness
        0x9204 : "ExposureBias",            // Exposure bias
        0x9205 : "MaxApertureValue",        // Smallest F number of lens
        0x9206 : "SubjectDistance",         // Distance to subject in meters
        0x9207 : "MeteringMode",            // Metering mode
        0x9208 : "LightSource",             // Kind of light source
        0x9209 : "Flash",                   // Flash status
        0x9214 : "SubjectArea",             // Location and area of main subject
        0x920A : "FocalLength",             // Focal length of the lens in mm
        0xA20B : "FlashEnergy",             // Strobe energy in BCPS
        0xA20C : "SpatialFrequencyResponse",    //
        0xA20E : "FocalPlaneXResolution",   // Number of pixels in width direction per FocalPlaneResolutionUnit
        0xA20F : "FocalPlaneYResolution",   // Number of pixels in height direction per FocalPlaneResolutionUnit
        0xA210 : "FocalPlaneResolutionUnit",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution
        0xA214 : "SubjectLocation",         // Location of subject in image
        0xA215 : "ExposureIndex",           // Exposure index selected on camera
        0xA217 : "SensingMethod",           // Image sensor type
        0xA300 : "FileSource",              // Image source (3 == DSC)
        0xA301 : "SceneType",               // Scene type (1 == directly photographed)
        0xA302 : "CFAPattern",              // Color filter array geometric pattern
        0xA401 : "CustomRendered",          // Special processing
        0xA402 : "ExposureMode",            // Exposure mode
        0xA403 : "WhiteBalance",            // 1 = auto white balance, 2 = manual
        0xA404 : "DigitalZoomRation",       // Digital zoom ratio
        0xA405 : "FocalLengthIn35mmFilm",   // Equivalent foacl length assuming 35mm film camera (in mm)
        0xA406 : "SceneCaptureType",        // Type of scene
        0xA407 : "GainControl",             // Degree of overall image gain adjustment
        0xA408 : "Contrast",                // Direction of contrast processing applied by camera
        0xA409 : "Saturation",              // Direction of saturation processing applied by camera
        0xA40A : "Sharpness",               // Direction of sharpness processing applied by camera
        0xA40B : "DeviceSettingDescription",    //
        0xA40C : "SubjectDistanceRange",    // Distance to subject

        // other tags
        0xA005 : "InteroperabilityIFDPointer",
        0xA420 : "ImageUniqueID"            // Identifier assigned uniquely to each image
    };

    var TiffTags = EXIF.TiffTags = {
        0x0100 : "ImageWidth",
        0x0101 : "ImageHeight",
        0x8769 : "ExifIFDPointer",
        0x8825 : "GPSInfoIFDPointer",
        0xA005 : "InteroperabilityIFDPointer",
        0x0102 : "BitsPerSample",
        0x0103 : "Compression",
        0x0106 : "PhotometricInterpretation",
        0x0112 : "Orientation",
        0x0115 : "SamplesPerPixel",
        0x011C : "PlanarConfiguration",
        0x0212 : "YCbCrSubSampling",
        0x0213 : "YCbCrPositioning",
        0x011A : "XResolution",
        0x011B : "YResolution",
        0x0128 : "ResolutionUnit",
        0x0111 : "StripOffsets",
        0x0116 : "RowsPerStrip",
        0x0117 : "StripByteCounts",
        0x0201 : "JPEGInterchangeFormat",
        0x0202 : "JPEGInterchangeFormatLength",
        0x012D : "TransferFunction",
        0x013E : "WhitePoint",
        0x013F : "PrimaryChromaticities",
        0x0211 : "YCbCrCoefficients",
        0x0214 : "ReferenceBlackWhite",
        0x0132 : "DateTime",
        0x010E : "ImageDescription",
        0x010F : "Make",
        0x0110 : "Model",
        0x0131 : "Software",
        0x013B : "Artist",
        0x8298 : "Copyright"
    };

    var GPSTags = EXIF.GPSTags = {
        0x0000 : "GPSVersionID",
        0x0001 : "GPSLatitudeRef",
        0x0002 : "GPSLatitude",
        0x0003 : "GPSLongitudeRef",
        0x0004 : "GPSLongitude",
        0x0005 : "GPSAltitudeRef",
        0x0006 : "GPSAltitude",
        0x0007 : "GPSTimeStamp",
        0x0008 : "GPSSatellites",
        0x0009 : "GPSStatus",
        0x000A : "GPSMeasureMode",
        0x000B : "GPSDOP",
        0x000C : "GPSSpeedRef",
        0x000D : "GPSSpeed",
        0x000E : "GPSTrackRef",
        0x000F : "GPSTrack",
        0x0010 : "GPSImgDirectionRef",
        0x0011 : "GPSImgDirection",
        0x0012 : "GPSMapDatum",
        0x0013 : "GPSDestLatitudeRef",
        0x0014 : "GPSDestLatitude",
        0x0015 : "GPSDestLongitudeRef",
        0x0016 : "GPSDestLongitude",
        0x0017 : "GPSDestBearingRef",
        0x0018 : "GPSDestBearing",
        0x0019 : "GPSDestDistanceRef",
        0x001A : "GPSDestDistance",
        0x001B : "GPSProcessingMethod",
        0x001C : "GPSAreaInformation",
        0x001D : "GPSDateStamp",
        0x001E : "GPSDifferential"
    };

    var StringValues = EXIF.StringValues = {
        ExposureProgram : {
            0 : "Not defined",
            1 : "Manual",
            2 : "Normal program",
            3 : "Aperture priority",
            4 : "Shutter priority",
            5 : "Creative program",
            6 : "Action program",
            7 : "Portrait mode",
            8 : "Landscape mode"
        },
        MeteringMode : {
            0 : "Unknown",
            1 : "Average",
            2 : "CenterWeightedAverage",
            3 : "Spot",
            4 : "MultiSpot",
            5 : "Pattern",
            6 : "Partial",
            255 : "Other"
        },
        LightSource : {
            0 : "Unknown",
            1 : "Daylight",
            2 : "Fluorescent",
            3 : "Tungsten (incandescent light)",
            4 : "Flash",
            9 : "Fine weather",
            10 : "Cloudy weather",
            11 : "Shade",
            12 : "Daylight fluorescent (D 5700 - 7100K)",
            13 : "Day white fluorescent (N 4600 - 5400K)",
            14 : "Cool white fluorescent (W 3900 - 4500K)",
            15 : "White fluorescent (WW 3200 - 3700K)",
            17 : "Standard light A",
            18 : "Standard light B",
            19 : "Standard light C",
            20 : "D55",
            21 : "D65",
            22 : "D75",
            23 : "D50",
            24 : "ISO studio tungsten",
            255 : "Other"
        },
        Flash : {
            0x0000 : "Flash did not fire",
            0x0001 : "Flash fired",
            0x0005 : "Strobe return light not detected",
            0x0007 : "Strobe return light detected",
            0x0009 : "Flash fired, compulsory flash mode",
            0x000D : "Flash fired, compulsory flash mode, return light not detected",
            0x000F : "Flash fired, compulsory flash mode, return light detected",
            0x0010 : "Flash did not fire, compulsory flash mode",
            0x0018 : "Flash did not fire, auto mode",
            0x0019 : "Flash fired, auto mode",
            0x001D : "Flash fired, auto mode, return light not detected",
            0x001F : "Flash fired, auto mode, return light detected",
            0x0020 : "No flash function",
            0x0041 : "Flash fired, red-eye reduction mode",
            0x0045 : "Flash fired, red-eye reduction mode, return light not detected",
            0x0047 : "Flash fired, red-eye reduction mode, return light detected",
            0x0049 : "Flash fired, compulsory flash mode, red-eye reduction mode",
            0x004D : "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
            0x004F : "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
            0x0059 : "Flash fired, auto mode, red-eye reduction mode",
            0x005D : "Flash fired, auto mode, return light not detected, red-eye reduction mode",
            0x005F : "Flash fired, auto mode, return light detected, red-eye reduction mode"
        },
        SensingMethod : {
            1 : "Not defined",
            2 : "One-chip color area sensor",
            3 : "Two-chip color area sensor",
            4 : "Three-chip color area sensor",
            5 : "Color sequential area sensor",
            7 : "Trilinear sensor",
            8 : "Color sequential linear sensor"
        },
        SceneCaptureType : {
            0 : "Standard",
            1 : "Landscape",
            2 : "Portrait",
            3 : "Night scene"
        },
        SceneType : {
            1 : "Directly photographed"
        },
        CustomRendered : {
            0 : "Normal process",
            1 : "Custom process"
        },
        WhiteBalance : {
            0 : "Auto white balance",
            1 : "Manual white balance"
        },
        GainControl : {
            0 : "None",
            1 : "Low gain up",
            2 : "High gain up",
            3 : "Low gain down",
            4 : "High gain down"
        },
        Contrast : {
            0 : "Normal",
            1 : "Soft",
            2 : "Hard"
        },
        Saturation : {
            0 : "Normal",
            1 : "Low saturation",
            2 : "High saturation"
        },
        Sharpness : {
            0 : "Normal",
            1 : "Soft",
            2 : "Hard"
        },
        SubjectDistanceRange : {
            0 : "Unknown",
            1 : "Macro",
            2 : "Close view",
            3 : "Distant view"
        },
        FileSource : {
            3 : "DSC"
        },

        Components : {
            0 : "",
            1 : "Y",
            2 : "Cb",
            3 : "Cr",
            4 : "R",
            5 : "G",
            6 : "B"
        }
    };

    function addEvent(element, event, handler) {
        if (element.addEventListener) {
            element.addEventListener(event, handler, false);
        } else if (element.attachEvent) {
            element.attachEvent("on" + event, handler);
        }
    }

    function imageHasData(img) {
        return !!(img.exifdata);
    }


    function base64ToArrayBuffer(base64, contentType) {
        contentType = contentType || base64.match(/^data\:([^\;]+)\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'
        base64 = base64.replace(/^data\:([^\;]+)\;base64,/gmi, '');
        var binary = atob(base64);
        var len = binary.length;
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        for (var i = 0; i < len; i++) {
            view[i] = binary.charCodeAt(i);
        }
        return buffer;
    }

    function objectURLToBlob(url, callback) {
        var http = new XMLHttpRequest();
        http.open("GET", url, true);
        http.responseType = "blob";
        http.onload = function(e) {
            if (this.status == 200 || this.status === 0) {
                callback(this.response);
            }
        };
        http.send();
    }

    function getImageData(img, callback) {
        function handleBinaryFile(binFile) {
            var data = findEXIFinJPEG(binFile);
            var iptcdata = findIPTCinJPEG(binFile);
            img.exifdata = data || {};
            img.iptcdata = iptcdata || {};
            if (callback) {
                callback.call(img);
            }
        }

        if (img.src) {
            if (/^data\:/i.test(img.src)) { // Data URI
                var arrayBuffer = base64ToArrayBuffer(img.src);
                handleBinaryFile(arrayBuffer);

            } else if (/^blob\:/i.test(img.src)) { // Object URL
                var fileReader = new FileReader();
                fileReader.onload = function(e) {
                    handleBinaryFile(e.target.result);
                };
                objectURLToBlob(img.src, function (blob) {
                    fileReader.readAsArrayBuffer(blob);
                });
            } else {
                var http = new XMLHttpRequest();
                http.onload = function() {
                    if (this.status == 200 || this.status === 0) {
                        handleBinaryFile(http.response);
                    } else {
                        throw "Could not load image";
                    }
                    http = null;
                };
                http.open("GET", img.src, true);
                http.responseType = "arraybuffer";
                http.send(null);
            }
        } else if (window.FileReader && (img instanceof window.Blob || img instanceof window.File)) {
            var fileReader = new FileReader();
            fileReader.onload = function(e) {
                if (debug) console.log("Got file of length " + e.target.result.byteLength);
                handleBinaryFile(e.target.result);
            };

            fileReader.readAsArrayBuffer(img);
        }
    }

    function findEXIFinJPEG(file) {
        var dataView = new DataView(file);

        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
            if (debug) console.log("Not a valid JPEG");
            return false; // not a valid jpeg
        }

        var offset = 2,
            length = file.byteLength,
            marker;

        while (offset < length) {
            if (dataView.getUint8(offset) != 0xFF) {
                if (debug) console.log("Not a valid marker at offset " + offset + ", found: " + dataView.getUint8(offset));
                return false; // not a valid marker, something is wrong
            }

            marker = dataView.getUint8(offset + 1);
            if (debug) console.log(marker);

            // we could implement handling for other markers here,
            // but we're only looking for 0xFFE1 for EXIF data

            if (marker == 225) {
                if (debug) console.log("Found 0xFFE1 marker");

                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);

                // offset += 2 + file.getShortAt(offset+2, true);

            } else {
                offset += 2 + dataView.getUint16(offset+2);
            }

        }

    }

    function findIPTCinJPEG(file) {
        var dataView = new DataView(file);

        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
            if (debug) console.log("Not a valid JPEG");
            return false; // not a valid jpeg
        }

        var offset = 2,
            length = file.byteLength;


        var isFieldSegmentStart = function(dataView, offset){
            return (
                dataView.getUint8(offset) === 0x38 &&
                dataView.getUint8(offset+1) === 0x42 &&
                dataView.getUint8(offset+2) === 0x49 &&
                dataView.getUint8(offset+3) === 0x4D &&
                dataView.getUint8(offset+4) === 0x04 &&
                dataView.getUint8(offset+5) === 0x04
            );
        };

        while (offset < length) {

            if ( isFieldSegmentStart(dataView, offset )){

                // Get the length of the name header (which is padded to an even number of bytes)
                var nameHeaderLength = dataView.getUint8(offset+7);
                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;
                // Check for pre photoshop 6 format
                if(nameHeaderLength === 0) {
                    // Always 4
                    nameHeaderLength = 4;
                }

                var startOffset = offset + 8 + nameHeaderLength;
                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);

                return readIPTCData(file, startOffset, sectionLength);

                break;

            }


            // Not the marker, continue searching
            offset++;

        }

    }
    var IptcFieldMap = {
        0x78 : 'caption',
        0x6E : 'credit',
        0x19 : 'keywords',
        0x37 : 'dateCreated',
        0x50 : 'byline',
        0x55 : 'bylineTitle',
        0x7A : 'captionWriter',
        0x69 : 'headline',
        0x74 : 'copyright',
        0x0F : 'category'
    };
    function readIPTCData(file, startOffset, sectionLength){
        var dataView = new DataView(file);
        var data = {};
        var fieldValue, fieldName, dataSize, segmentType, segmentSize;
        var segmentStartPos = startOffset;
        while(segmentStartPos < startOffset+sectionLength) {
            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){
                segmentType = dataView.getUint8(segmentStartPos+2);
                if(segmentType in IptcFieldMap) {
                    dataSize = dataView.getInt16(segmentStartPos+3);
                    segmentSize = dataSize + 5;
                    fieldName = IptcFieldMap[segmentType];
                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);
                    // Check if we already stored a value with this name
                    if(data.hasOwnProperty(fieldName)) {
                        // Value already stored with this name, create multivalue field
                        if(data[fieldName] instanceof Array) {
                            data[fieldName].push(fieldValue);
                        }
                        else {
                            data[fieldName] = [data[fieldName], fieldValue];
                        }
                    }
                    else {
                        data[fieldName] = fieldValue;
                    }
                }

            }
            segmentStartPos++;
        }
        return data;
    }



    function readTags(file, tiffStart, dirStart, strings, bigEnd) {
        var entries = file.getUint16(dirStart, !bigEnd),
            tags = {},
            entryOffset, tag,
            i;

        for (i=0;i<entries;i++) {
            entryOffset = dirStart + i*12 + 2;
            tag = strings[file.getUint16(entryOffset, !bigEnd)];
            if (!tag && debug) console.log("Unknown tag: " + file.getUint16(entryOffset, !bigEnd));
            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);
        }
        return tags;
    }


    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
        var type = file.getUint16(entryOffset+2, !bigEnd),
            numValues = file.getUint32(entryOffset+4, !bigEnd),
            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,
            offset,
            vals, val, n,
            numerator, denominator;

        switch (type) {
            case 1: // byte, 8-bit unsigned int
            case 7: // undefined, 8-bit byte, value depending on field
                if (numValues == 1) {
                    return file.getUint8(entryOffset + 8, !bigEnd);
                } else {
                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint8(offset + n);
                    }
                    return vals;
                }

            case 2: // ascii, 8-bit byte
                offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                return getStringFromDB(file, offset, numValues-1);

            case 3: // short, 16 bit int
                if (numValues == 1) {
                    return file.getUint16(entryOffset + 8, !bigEnd);
                } else {
                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);
                    }
                    return vals;
                }

            case 4: // long, 32 bit int
                if (numValues == 1) {
                    return file.getUint32(entryOffset + 8, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);
                    }
                    return vals;
                }

            case 5:    // rational = two long values, first is numerator, second is denominator
                if (numValues == 1) {
                    numerator = file.getUint32(valueOffset, !bigEnd);
                    denominator = file.getUint32(valueOffset+4, !bigEnd);
                    val = new Number(numerator / denominator);
                    val.numerator = numerator;
                    val.denominator = denominator;
                    return val;
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);
                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);
                        vals[n] = new Number(numerator / denominator);
                        vals[n].numerator = numerator;
                        vals[n].denominator = denominator;
                    }
                    return vals;
                }

            case 9: // slong, 32 bit signed int
                if (numValues == 1) {
                    return file.getInt32(entryOffset + 8, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);
                    }
                    return vals;
                }

            case 10: // signed rational, two slongs, first is numerator, second is denominator
                if (numValues == 1) {
                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);
                    }
                    return vals;
                }
        }
    }

    function getStringFromDB(buffer, start, length) {
        var outstr = "";
        for (n = start; n < start+length; n++) {
            outstr += String.fromCharCode(buffer.getUint8(n));
        }
        return outstr;
    }

    function readEXIFData(file, start) {
        if (getStringFromDB(file, start, 4) != "Exif") {
            if (debug) console.log("Not valid EXIF data! " + getStringFromDB(file, start, 4));
            return false;
        }

        var bigEnd,
            tags, tag,
            exifData, gpsData,
            tiffOffset = start + 6;

        // test for TIFF validity and endianness
        if (file.getUint16(tiffOffset) == 0x4949) {
            bigEnd = false;
        } else if (file.getUint16(tiffOffset) == 0x4D4D) {
            bigEnd = true;
        } else {
            if (debug) console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)");
            return false;
        }

        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {
            if (debug) console.log("Not valid TIFF data! (no 0x002A)");
            return false;
        }

        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);

        if (firstIFDOffset < 0x00000008) {
            if (debug) console.log("Not valid TIFF data! (First offset less than 8)", file.getUint32(tiffOffset+4, !bigEnd));
            return false;
        }

        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);

        if (tags.ExifIFDPointer) {
            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);
            for (tag in exifData) {
                switch (tag) {
                    case "LightSource" :
                    case "Flash" :
                    case "MeteringMode" :
                    case "ExposureProgram" :
                    case "SensingMethod" :
                    case "SceneCaptureType" :
                    case "SceneType" :
                    case "CustomRendered" :
                    case "WhiteBalance" :
                    case "GainControl" :
                    case "Contrast" :
                    case "Saturation" :
                    case "Sharpness" :
                    case "SubjectDistanceRange" :
                    case "FileSource" :
                        exifData[tag] = StringValues[tag][exifData[tag]];
                        break;

                    case "ExifVersion" :
                    case "FlashpixVersion" :
                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);
                        break;

                    case "ComponentsConfiguration" :
                        exifData[tag] =
                            StringValues.Components[exifData[tag][0]] +
                            StringValues.Components[exifData[tag][1]] +
                            StringValues.Components[exifData[tag][2]] +
                            StringValues.Components[exifData[tag][3]];
                        break;
                }
                tags[tag] = exifData[tag];
            }
        }

        if (tags.GPSInfoIFDPointer) {
            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);
            for (tag in gpsData) {
                switch (tag) {
                    case "GPSVersionID" :
                        gpsData[tag] = gpsData[tag][0] +
                            "." + gpsData[tag][1] +
                            "." + gpsData[tag][2] +
                            "." + gpsData[tag][3];
                        break;
                }
                tags[tag] = gpsData[tag];
            }
        }

        return tags;
    }

    EXIF.getData = function(img, callback) {
        if ((img instanceof Image || img instanceof HTMLImageElement) && !img.complete) return false;

        if (!imageHasData(img)) {
            getImageData(img, callback);
        } else {
            if (callback) {
                callback.call(img);
            }
        }
        return true;
    }

    EXIF.getTag = function(img, tag) {
        if (!imageHasData(img)) return;
        return img.exifdata[tag];
    }

    EXIF.getAllTags = function(img) {
        if (!imageHasData(img)) return {};
        var a,
            data = img.exifdata,
            tags = {};
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                tags[a] = data[a];
            }
        }
        return tags;
    }

    EXIF.pretty = function(img) {
        if (!imageHasData(img)) return "";
        var a,
            data = img.exifdata,
            strPretty = "";
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                if (typeof data[a] == "object") {
                    if (data[a] instanceof Number) {
                        strPretty += a + " : " + data[a] + " [" + data[a].numerator + "/" + data[a].denominator + "]\r\n";
                    } else {
                        strPretty += a + " : [" + data[a].length + " values]\r\n";
                    }
                } else {
                    strPretty += a + " : " + data[a] + "\r\n";
                }
            }
        }
        return strPretty;
    }

    EXIF.readFromBinaryFile = function(file) {
        return findEXIFinJPEG(file);
    }

    if (typeof define === 'function' && define.amd) {
        define('exif-js', [], function() {
            return EXIF;
        });
    }
}.call(this));

/**
 * Mega pixel image rendering library for iOS6 Safari
 *
 * Fixes iOS6 Safari's image file rendering issue for large size image (over mega-pixel),
 * which causes unexpected subsampling when drawing it in canvas.
 * By using this library, you can safely render the image with proper stretching.
 *
 * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>
 * Released under the MIT license
 */
(function() {

  /**
   * Detect subsampling in loaded image.
   * In iOS, larger images than 2M pixels may be subsampled in rendering.
   */
  function detectSubsampling(img) {
    var iw = img.naturalWidth, ih = img.naturalHeight;
    if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image
      var canvas = document.createElement('canvas');
      canvas.width = canvas.height = 1;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(img, -iw + 1, 0);
      // subsampled image becomes half smaller in rendering size.
      // check alpha channel value to confirm image is covering edge pixel or not.
      // if alpha value is 0 image is not covering, hence subsampled.
      return ctx.getImageData(0, 0, 1, 1).data[3] === 0;
    } else {
      return false;
    }
  }

  /**
   * Detecting vertical squash in loaded image.
   * Fixes a bug which squash image vertically while drawing into canvas for some images.
   */
  function detectVerticalSquash(img, iw, ih) {
    var canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = ih;
    var ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0);
    var data = ctx.getImageData(0, 0, 1, ih).data;
    // search image edge pixel position in case it is squashed vertically.
    var sy = 0;
    var ey = ih;
    var py = ih;
    while (py > sy) {
      var alpha = data[(py - 1) * 4 + 3];
      if (alpha === 0) {
        ey = py;
      } else {
        sy = py;
      }
      py = (ey + sy) >> 1;
    }
    var ratio = (py / ih);
    return (ratio===0)?1:ratio;
  }

  /**
   * Rendering image element (with resizing) and get its data URL
   */
  function renderImageToDataURL(img, options, doSquash) {
    var canvas = document.createElement('canvas');
    renderImageToCanvas(img, canvas, options, doSquash);
    return canvas.toDataURL("image/jpeg", options.quality || 0.8);
  }

  /**
   * Rendering image element (with resizing) into the canvas element
   */
  function renderImageToCanvas(img, canvas, options, doSquash) {
    var iw = img.naturalWidth, ih = img.naturalHeight;
    if (!(iw+ih)) return;
    var width = options.width, height = options.height;
    var ctx = canvas.getContext('2d');
    ctx.save();
    transformCoordinate(canvas, ctx, width, height, options.orientation);
    var subsampled = detectSubsampling(img);
    if (subsampled) {
      iw /= 2;
      ih /= 2;
    }
    var d = 1024; // size of tiling canvas
    var tmpCanvas = document.createElement('canvas');
    tmpCanvas.width = tmpCanvas.height = d;
    var tmpCtx = tmpCanvas.getContext('2d');
    var vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1;
    var dw = Math.ceil(d * width / iw);
    var dh = Math.ceil(d * height / ih / vertSquashRatio);
    var sy = 0;
    var dy = 0;
    while (sy < ih) {
      var sx = 0;
      var dx = 0;
      while (sx < iw) {
        tmpCtx.clearRect(0, 0, d, d);
        tmpCtx.drawImage(img, -sx, -sy);
        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);
        sx += d;
        dx += dw;
      }
      sy += d;
      dy += dh;
    }
    ctx.restore();
    tmpCanvas = tmpCtx = null;
  }

  /**
   * Transform canvas coordination according to specified frame size and orientation
   * Orientation value is from EXIF tag
   */
  function transformCoordinate(canvas, ctx, width, height, orientation) {
    switch (orientation) {
      case 5:
      case 6:
      case 7:
      case 8:
        canvas.width = height;
        canvas.height = width;
        break;
      default:
        canvas.width = width;
        canvas.height = height;
    }
    switch (orientation) {
      case 2:
        // horizontal flip
        ctx.translate(width, 0);
        ctx.scale(-1, 1);
        break;
      case 3:
        // 180 rotate left
        ctx.translate(width, height);
        ctx.rotate(Math.PI);
        break;
      case 4:
        // vertical flip
        ctx.translate(0, height);
        ctx.scale(1, -1);
        break;
      case 5:
        // vertical flip + 90 rotate right
        ctx.rotate(0.5 * Math.PI);
        ctx.scale(1, -1);
        break;
      case 6:
        // 90 rotate right
        ctx.rotate(0.5 * Math.PI);
        ctx.translate(0, -height);
        break;
      case 7:
        // horizontal flip + 90 rotate right
        ctx.rotate(0.5 * Math.PI);
        ctx.translate(width, -height);
        ctx.scale(-1, 1);
        break;
      case 8:
        // 90 rotate left
        ctx.rotate(-0.5 * Math.PI);
        ctx.translate(-width, 0);
        break;
      default:
        break;
    }
  }

  var URL = window.URL && window.URL.createObjectURL ? window.URL :
            window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :
            null;

  /**
   * MegaPixImage class
   */
  function MegaPixImage(srcImage) {
    if (window.Blob && srcImage instanceof Blob) {
      if (!URL) { throw Error("No createObjectURL function found to create blob url"); }
      var img = new Image();
      img.src = URL.createObjectURL(srcImage);
      this.blob = srcImage;
      srcImage = img;
    }
    if (!srcImage.naturalWidth && !srcImage.naturalHeight) {
      var _this = this;
      srcImage.onload = srcImage.onerror = function() {
        var listeners = _this.imageLoadListeners;
        if (listeners) {
          _this.imageLoadListeners = null;
          for (var i=0, len=listeners.length; i<len; i++) {
            listeners[i]();
          }
        }
      };
      this.imageLoadListeners = [];
    }
    this.srcImage = srcImage;
  }

  /**
   * Rendering megapix image into specified target element
   */
  MegaPixImage.prototype.render = function(target, options, callback) {
    if (this.imageLoadListeners) {
      var _this = this;
      this.imageLoadListeners.push(function() { _this.render(target, options, callback); });
      return;
    }
    options = options || {};
    var imgWidth = this.srcImage.naturalWidth, imgHeight = this.srcImage.naturalHeight,
        width = options.width, height = options.height,
        maxWidth = options.maxWidth, maxHeight = options.maxHeight,
        doSquash = !this.blob || this.blob.type === 'image/jpeg';
    if (width && !height) {
      height = (imgHeight * width / imgWidth) << 0;
    } else if (height && !width) {
      width = (imgWidth * height / imgHeight) << 0;
    } else {
      width = imgWidth;
      height = imgHeight;
    }
    if (maxWidth && width > maxWidth) {
      width = maxWidth;
      height = (imgHeight * width / imgWidth) << 0;
    }
    if (maxHeight && height > maxHeight) {
      height = maxHeight;
      width = (imgWidth * height / imgHeight) << 0;
    }
    var opt = { width : width, height : height };
    for (var k in options) opt[k] = options[k];

    var tagName = target.tagName.toLowerCase();
    if (tagName === 'img') {
      target.src = renderImageToDataURL(this.srcImage, opt, doSquash);
    } else if (tagName === 'canvas') {
      renderImageToCanvas(this.srcImage, target, opt, doSquash);
    }
    if (typeof this.onrender === 'function') {
      this.onrender(target);
    }
    if (callback) {
      callback();
    }
    if (this.blob) {
      this.blob = null;
      URL.revokeObjectURL(this.srcImage.src);
    }
  };

  /**
   * Export class to global
   */
  if (typeof define === 'function' && define.amd) {
    define([], function() { return MegaPixImage; }); // for AMD loader
  } else {
    this.MegaPixImage = MegaPixImage;
  }

})();

_wechat_f = {
  "appid": "",
  "img_url": "",
  "img_width": 200,
  "img_height": 200,
  "link": "",
  "desc": "",
  "title": ""
};

_wechat = {
  "appid": "",
  "img_url": "",
  "img_width": 200,
  "img_height": 200,
  "link": "",
  "desc": "",
  "title": ""
};

_wechat_bool = false;

reloadWechat = function() {
  shareFriend();
  return shareTimeline();
};

shareFriend = function() {
  if (window.WeixinJSBridge) {
    return WeixinJSBridge.invoke('sendAppMessage', _wechat_f);
  }
};

shareTimeline = function() {
  if (window.WeixinJSBridge) {
    return WeixinJSBridge.invoke('shareTimeline', _wechat);
  }
};

document.addEventListener('WeixinJSBridgeReady', function() {
  var nav;
  _wechat_bool = true;
  WeixinJSBridge.on('menu:share:appmessage', function(argv) {
    return shareFriend();
  });
  WeixinJSBridge.on('menu:share:timeline', function(argv) {
    return shareTimeline();
  });
  return nav = navigator.userAgent.toLowerCase();
});

BindShare = function(content, url, pic) {
  var list;
  if (url == null) {
    url = window.location.href;
  }
  list = {
    "qweibo": "http://v.t.qq.com/share/share.php?title={title}&url={url}&pic={pic}",
    "renren": "http://share.renren.com/share/buttonshare.do?title={title}&link={url}&pic={pic}",
    "weibo": "http://v.t.sina.com.cn/share/share.php?title={title}&url={url}&pic={pic}",
    "qzone": "http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url={url}&title={title}&pic={pic}",
    "facebook": "http://www.facebook.com/sharer/sharer.php?s=100&p[url]={url}}&p[title]={title}&p[summary]={title}&pic={pic}",
    "twitter": "https://twitter.com/intent/tweet?text={title}&pic={pic}",
    "kaixin": "http://www.kaixin001.com/rest/records.php?content={title}&url={url}&pic={pic}",
    "douban": "http://www.douban.com/share/service?bm=&image={pic}&href={url}&updated=&name={title}"
  };
  return $("a[data-share]").each(function(e) {
    return $(this).attr("href", fShare(list[$(this).data('share')], content, url, pic));
  });
};

fShare = function(url, content, sendUrl, pic) {
  var backUrl, shareContent;
  if (pic == null) {
    pic = "";
  }
  content = content;
  shareContent = encodeURIComponent(content);
  pic = encodeURIComponent(pic);
  url = url.replace("{title}", shareContent);
  url = url.replace("{pic}", pic);
  backUrl = encodeURIComponent(sendUrl);
  url = url.replace("{url}", backUrl);
  return url;
};

_wechat_f = {
  "appid": "",
  "img_url": "http://m.giccoo.com/iwatch/img/share.jpg",
  "img_width": 200,
  "img_height": 200,
  "link": "",
  "desc": "各种表带,表盘我都挑花眼了.",
  "title": "刚买了个 Apple Watch , 用着还不错, 你也要来一个吗?"
};

_wechat = {
  "appid": "",
  "img_url": "http://m.giccoo.com/iwatch/img/share.jpg",
  "img_width": 200,
  "img_height": 200,
  "link": "",
  "desc": "各种表带,表盘我都挑花眼了.",
  "title": "刚买了个 Apple Watch , 用着还不错, 你也要来一个吗?"
};

hosts = "http://g.giccoo.com";

shareContent = {
  watchband: "watchband-2",
  watch: "watch",
  wall: "default",
  screen: "image"
};

refreshShare = function() {
  var url;
  url = "http://m.giccoo.com/iwatch/#/share/" + shareContent.watch + "/" + shareContent.watchband + "/" + shareContent.wall;
  _wechat_f.link = url;
  _wechat.link = url;
  return reloadWechat();
};

app = angular.module('kelvin', ["ngRoute", "ngTouch", "ngAnimate"]);

app.config([
  "$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {
    $routeProvider.when('/', {
      templateUrl: "home.html"
    });
    return $routeProvider.when('/share/:watch/:watchband/:wallpaper', {
      templateUrl: "share.html"
    });
  }
]);

app.controller('MainController', function($rootScope, $scope) {
  return $rootScope.$on("$routeChangeSuccess", function() {
    return $(".loaded").removeClass("loaded");
  });
});

app.controller("ShareController", function($scope, $location, $routeParams) {
  var CheckTime;
  shareContent.watch = $routeParams.watch;
  shareContent.watchband = $routeParams.watchband;
  shareContent.wall = $routeParams.wallpaper;
  refreshShare();
  console.log($routeParams);
  this.watch = "img/dial-" + $routeParams.watch + ".png";
  this.watchband = $routeParams.watchband;
  this.wall = $routeParams.wallpaper;
  this.nurl = "img/dial-" + $routeParams.watch + "-name.png";
  if (this.wall === "default") {
    $("#wallpager").removeClass("sharewall");
  } else if (this.wall.indexOf("dial-screen-bg") > -1) {
    $("#wallpager").css({
      "background-image": "url(img/" + this.wall + ".jpg)"
    });
  } else {
    $("#wallpager").css({
      "background-image": "url(http://g.giccoo.com/uploadDir/" + this.wall + ".png)"
    });
  }
  this.buy = function() {
    return $location.path("/");
  };
  CheckTime = function($scope) {
    var h, hs, m, ms, t;
    t = new Date();
    h = t.getHours();
    h = h % 12;
    m = t.getMinutes();
    hs = new Date().getHours();
    ms = new Date().getMinutes();
    $scope.getHours = 180 + h / 12 * 360 + m / 60 * 30;
    $scope.getMinutes = 180 + m / 60 * 360;
    $scope.Hours = hs >= 10 ? hs : "0" + hs;
    $scope.Minutes = ms >= 10 ? ms : "0" + ms;
    return setTimeout(function() {
      CheckTime($scope);
      return $scope.$apply();
    }, 10000);
  };
  return CheckTime($scope);
});

app.controller("HomeController", function($scope, $rootScope, $location) {
  $scope.share = {
    watch: "watch",
    watchband: "watchband-2",
    screen: "timer"
  };
  $rootScope.noteText = "轻触屏幕更换壁纸";
  return this.showShare = function(bool) {
    return $rootScope.ShareWechat = bool;
  };
});

app.controller("DailController", function($scope, $rootScope, $http) {
  var CheckTime, tis;
  $rootScope.dialscreen = {
    timer: true,
    wall: false,
    timerSH: "show",
    wallSH: "hide"
  };
  CheckTime = function($scope) {
    var h, hs, m, ms, t;
    t = new Date();
    h = t.getHours();
    h = h % 12;
    m = t.getMinutes();
    hs = new Date().getHours();
    ms = new Date().getMinutes();
    $scope.getHours = 180 + h / 12 * 360 + m / 60 * 30;
    $scope.getMinutes = 180 + m / 60 * 360;
    $scope.Hours = hs >= 10 ? hs : "0" + hs;
    $scope.Minutes = ms >= 10 ? ms : "0" + ms;
    return setTimeout(function() {
      CheckTime($scope);
      return $scope.$apply();
    }, 10000);
  };
  CheckTime($scope);
  this.timerfun = function() {
    $rootScope.dialscreen.timerSH = "hide";
    $rootScope.dialscreen.wallSH = "show";
    if (!$rootScope.android4) {
      return $rootScope.uploadFile = true;
    }
  };
  tis = this;
  return setTimeout(function() {
    tis.timerfun();
    return $scope.$apply();
  }, 3000);
});

CreateImg = function(file, $scope) {
  var $img, canvas, url;
  url = my.createObjectURL(file);
  canvas = document.createElement("canvas");
  $(canvas).attr({
    "width": "270",
    "height": "325",
    "id": "imgcanvas"
  });
  $img = new Image();
  $img.onload = function() {
    return EXIF.getData($img, function() {
      var info, mpImg;
      info = EXIF.getTag($img, "Orientation");
      mpImg = new MegaPixImage(file);
      return mpImg.render(canvas, {
        maxWidth: 270,
        minHeight: 325
      }, function() {
        var ctx, _canvas;
        if ((info != null) && info === 6) {
          _canvas = document.createElement("canvas");
          $(_canvas).attr({
            "width": canvas.height,
            "height": canvas.width
          });
          ctx = _canvas.getContext("2d");
          ctx.rotate(Math.PI / 2);
          ctx.drawImage(canvas, 0, -canvas.height, canvas.width, canvas.height);
          canvas = _canvas;
        }
        $scope.imgData = canvas.toDataURL("image/png");
        return $scope.$apply();
      });
    });
  };
  return $img.src = url;
};

app.controller("SlideController", function($scope, $location, $rootScope, $http, $animate) {
  var arr, nav, tis, uploadIMG;
  this.slider = _slider;
  this.watchbandimg = {
    "watch": "watchband-2",
    "edition": "watchband-1",
    "sport": "watchband-7"
  };
  this.watchbandimgs = _watchbandimgs;
  this.watchbandbg = {
    "watch": "show",
    "edition": "show",
    "sport": "show"
  };
  this.name = "watch";
  this.note = "show";
  this.isAnimate = false;
  tis = this;
  $rootScope.uploadFile = false;
  $scope.watchbandimg = 1;
  this.changeD = function(evt) {
    var now;
    now = tis.watchbandimgs[tis.name].indexOf(tis.watchbandimg[tis.name]);
    now++;
    if (now > tis.watchbandimgs[tis.name].length - 1) {
      now = 0;
    }
    tis.watchbandimg[tis.name] = tis.watchbandimgs[tis.name][now];
    $animate.removeClass($("#" + tis.name + "bg")[0], "hide").then(function() {
      return tis.isAnimate = false;
    });
    $scope.watchbandimg++;
    return $scope.$apply();
  };
  this.watchband = function(name) {
    if (this.isAnimate) {
      return false;
    }
    this.isAnimate = true;
    this.name = name;
    this.note = "hide";
    $animate.addClass($("#" + name + "bg")[0], "hide").then(this.changeD);
    return true;
  };
  this.selectBGShow = function() {
    if (($rootScope.android4show != null) && $rootScope.android4show === "show") {
      return false;
    }
    return $rootScope.android4show = "show";
  };
  this.selectBG = function(i) {
    if ($rootScope.android4show !== "show") {
      return false;
    }
    $(".dialscreen .wall").css({
      "background-image": "url(img/dial-screen-bg-" + i + ".jpg)"
    });
    shareContent.wall = "dial-screen-bg-" + i;
    if (i >= 4) {
      $(".dialscreen .wall").css({
        "background-image": "url(img/dial-screen-bg.jpg)"
      });
      shareContent.wall = "dial-screen-bg";
    }
    refreshShare();
    return $rootScope.android4show = "hide";
  };
  nav = navigator.userAgent.toLowerCase();
  if (nav.indexOf("android") > -1) {
    arr = Math.abs(nav.split("android")[1].split(";")[0].replace(".", ""));
    arr = arr < 100 ? arr * 10 : arr;
    if (arr > 440) {
      $rootScope.android4 = true;
    }
  }
  $scope.$watch("watchbandimg", function() {
    shareContent.watchband = tis.watchbandimg[_slider[Math.abs($scope.iwatchTabs)].name];
    return refreshShare();
  });
  $scope.$watch("iwatchTabs", function() {
    shareContent.watch = _slider[Math.abs($scope.iwatchTabs)].name;
    return refreshShare();
  });
  $scope.$watch("inputFile", function() {
    if ($scope.inputFile != null) {
      return CreateImg($scope.inputFile, $scope);
    }
  });
  $scope.$watch("imgData", function() {
    if ($scope.imgData != null) {
      $(".dialscreen .wall").css({
        "background-image": "url(" + $scope.imgData + ")"
      });
      $rootScope.noteText = "图片上传中..";
      uploadIMG($scope.imgData);
      return $rootScope.uploadFile = false;
    }
  });
  return uploadIMG = function(data) {
    data = data.replace("data:image/png;base64,", "");
    return $http.post("" + hosts + "/image/upload", {
      data: data
    }).success(function(data, status, headers, config) {
      $rootScope.noteText = "上传成功,立即分享";
      shareContent.wall = data.filename;
      return refreshShare();
    }).error(function(err) {
      $rootScope.noteText = "上传失败,十分抱歉";
      if (!$rootScope.android4) {
        return $rootScope.uploadFile = true;
      }
    });
  };
});

app.directive("slidersList", function($swipe) {
  return {
    restrict: 'EA',
    templateUrl: "slider.html",
    link: function(scope, elem, attrs) {
      var slider;
      attrs.$addClass("slider-normal");
      if (scope[attrs.id] == null) {
        scope[attrs.id] = 0;
      }
      slider = elem[0].children[0];
      return $swipe.bind(elem, {
        "default": {
          lastSlide: 0,
          resistance: 1,
          lastw: 0,
          w: 0,
          x: 0,
          y: 0
        },
        slideNumber: 0,
        deltaX: 0,
        deltaY: 0,
        startTime: 0,
        scrollableArea: 0,
        isScrolling: false,
        setSlideNumber: function(offset) {
          var round, slideNumber;
          round = (offset ? (this.deltaX < 0 ? "ceil" : "floor") : "round");
          slideNumber = Math[round](this.getScroll() / (this.scrollableArea / slider.children.length));
          slideNumber += offset;
          slideNumber = Math.min(slideNumber, 0);
          this.slideNumber = Math.max(-(slider.children.length - 1), slideNumber);
          scope[attrs.id] = this.slideNumber;
          return scope.$apply();
        },
        getScroll: function() {
          var ret, translate3d;
          if ('webkitTransform' in slider.style) {
            translate3d = slider.style.webkitTransform.match(/translate3d\(([^,]*)/);
            ret = translate3d != null ? translate3d[1] : 0;
            return parseInt(ret, 10);
          }
        },
        start: function(e, evt) {
          this.startTime = +new Date();
          this["default"].w = $(elem[0].children[0]).width();
          this["default"].x = e.x;
          this["default"].y = e.y;
          this.deltaX = 0;
          this.deltaY = 0;
          this.lastSlide = -(slider.children.length - 1);
          this.lastw = this.getScroll();
          this.scrollableArea = this["default"].w * slider.children.length;
          this.setSlideNumber(0);
          return slider.style['-webkit-transition-duration'] = 0;
        },
        move: function(e, evt) {
          var offsetX, pageX, pageY, resistance;
          this.deltaX = e.x - this["default"].x;
          this.deltaY = e.y - this["default"].y;
          pageX = e.x;
          pageY = e.y;
          if (this.isScrolling == null) {
            this.isScrolling = Math.abs(this.deltaY) > Math.abs(this.deltaX);
          }
          if (this.isScrolling) {
            return "";
          }
          offsetX = (this.deltaX / this["default"].resistance) + this.lastw;
          resistance = (this.slideNumber === 0 && this.deltaX > 0 ? (pageX / this["default"].w) + 1.25 : (this.slideNumber === this.lastSlide && this.deltaX < 0 ? (Math.abs(pageX) / this["default"].w) + 1.25 : 1));
          evt.preventDefault();
          return slider.style.webkitTransform = 'translate3d(' + offsetX + 'px,0,0)';
        },
        end: function(e) {
          if (this.isScrolling) {
            return "";
          }
          this.setSlideNumber(((+new Date()) - this.startTime < 1000 && Math.abs(this.deltaX) > 15 ? (this.deltaX < 0 ? -1 : 1) : 0));
          return this.backOver();
        },
        backOver: function() {
          var offsetX;
          offsetX = this.slideNumber * this["default"].w;
          slider.style['-webkit-transition-duration'] = '.2s';
          return slider.style.webkitTransform = 'translate3d(' + offsetX + 'px,0,0)';
        }
      });
    }
  };
});

app.directive("file", function() {
  return {
    restrict: "E",
    template: '<input type="file" />',
    replace: true,
    require: 'ngModel',
    link: function(scope, elem, attr, ctrl) {
      var listener;
      listener = function() {
        return scope.$apply(function() {
          if (attr.multiple) {
            return ctrl.$setViewValue(elem[0].files);
          } else {
            return ctrl.$setViewValue(elem[0].files[0]);
          }
        });
      };
      return elem.bind('change', listener);
    }
  };
});

_slider = [
  {
    name: "watch",
    nurl: "img/dial-watch-name.png",
    url: "img/dial-watch.png"
  }, {
    name: "edition",
    nurl: "img/dial-edition-name.png",
    url: "img/dial-edition.png"
  }, {
    name: "sport",
    nurl: "img/dial-sport-name.png",
    url: "img/dial-sport.png"
  }
];

_watchbandimgs = {
  "watch": ["watchband-2", "watchband-4", "watchband-8", "watchband-3"],
  "edition": ["watchband-1", "watchband-7", "watchband-9", "watchband-5"],
  "sport": ["watchband-7", "watchband-9", "watchband-6", "watchband-5"]
};
